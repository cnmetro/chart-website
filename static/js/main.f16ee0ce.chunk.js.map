{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","query","city","axios","get","concat","then","res","Promise","all","this","request","dataArr","JSON","parse","stringify","forEach","arr","index1","v","index2","num","setState","_this2","requestAll","formatData","react_default","a","createElement","className","value","LineChart","width","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","Line","type","stroke","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wWAqEeA,6MA9DbC,MAAQ,CACNC,KAAM,GACNC,MAAO,mFAGDA,EAAOC,GACb,OAAOC,IAAMC,IAAN,2CAAAC,OAAqDH,EAArD,KAAAG,OAA6DJ,IACjEK,KAAK,SAAAC,GAAG,OAAIA,EAAIP,0CAGVC,GACT,OAAOO,QAAQC,IAAI,CACjBC,KAAKC,QAAQV,EAAO,MACpBS,KAAKC,QAAQV,EAAO,MACpBS,KAAKC,QAAQV,EAAO,2CAIbW,GACT,IAAMV,EAAO,CAAC,KAAM,KAAM,MACpBF,EAAOa,KAAKC,MAAMD,KAAKE,UAAUH,EAAQ,GAAGZ,OAClDY,EAAQI,QAAQ,SAACC,EAAKC,GACpBD,EAAIjB,KAAKgB,QAAQ,SAACG,EAAGC,GACnBpB,EAAKoB,GAAQlB,EAAKgB,IAAWC,EAAEE,QAInCX,KAAKY,SAAS,CACZtB,qDAIgB,IAAAuB,EAAAb,KAClBA,KAAKc,WAAWd,KAAKX,MAAME,OAAOK,KAAK,SAAAC,GACrCgB,EAAKE,WAAWlB,sCAKlB,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,mEACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,wBACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAChBH,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,qBAEFJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKjC,KAAMU,KAAKX,MAAMC,KACnDkC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/CZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,QAAQ,SACfd,EAAAC,EAAAC,cAACa,EAAA,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAeC,gBAAgB,QAC/BjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,KAAK,WAAWP,QAAQ,KAAKQ,OAAO,YAC1CtB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,KAAK,WAAWP,QAAQ,KAAKQ,OAAO,YAC1CtB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,KAAK,WAAWP,QAAQ,KAAKQ,OAAO,qBAxDlCC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.f16ee0ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    query: 'count=30'\n  }\n\n  request(query, city) {\n    return axios.get(`http://metro.sinchang.me/api/flows?city=${city}&${query}`)\n      .then(res => res.data)\n  }\n\n  requestAll(query) {\n    return Promise.all([\n      this.request(query, 'sh'),\n      this.request(query, 'bj'),\n      this.request(query, 'gz')\n    ])\n  }\n\n  formatData(dataArr) {\n    const city = ['sh', 'bj', 'gz']\n    const data = JSON.parse(JSON.stringify(dataArr[0].data))\n    dataArr.forEach((arr, index1) => {\n      arr.data.forEach((v, index2) => {\n        data[index2][city[index1]] = v.num\n      })\n    })\n\n    this.setState({\n      data\n    })\n  }\n\n  componentDidMount() {\n    this.requestAll(this.state.query).then(res => {\n      this.formatData(res)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <h2>Shanghai/Beijing/Guangzhou Metro Passenger Flow Chart</h2>\n        <p className=\"tip-text\">(unit: Ten thousand)</p>\n        <select className=\"custom-select range-select\">\n          <option value=\"1\">The last 30 days</option>\n        </select>\n        <LineChart width={800} height={400} data={this.state.data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"sh\" stroke=\"#8884d8\" />\n          <Line type=\"monotone\" dataKey=\"bj\" stroke=\"#82ca9d\" />\n          <Line type=\"monotone\" dataKey=\"gz\" stroke=\"#1281ca\" />\n        </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}